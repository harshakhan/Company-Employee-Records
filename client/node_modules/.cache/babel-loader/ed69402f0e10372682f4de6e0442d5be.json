{"ast":null,"code":"import Axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAILURE, LOGIN_REQUEST, REGISTER_REQUEST, REGISTER_FAILURE, REGISTER_SUCCESS, LOGOUT } from './actionTypes';\nexport const loginRequest = payload => ({\n  type: LOGIN_REQUEST,\n  payload\n});\nexport const loginSuccess = payload => ({\n  type: LOGIN_SUCCESS,\n  payload\n});\nexport const loginFailure = payload => ({\n  type: LOGIN_FAILURE,\n  payload\n});\nexport const saveAuth = payload => dispatch => {\n  localStorage.setItem('email', payload.email);\n  localStorage.setItem('name', payload.name);\n};\nexport const logoutActionCreator = () => ({\n  type: LOGOUT\n});\nexport const logout = () => dispatch => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('email');\n  localStorage.removeItem('name');\n  dispatch(logoutActionCreator());\n};\nexport const login = payload => async dispatch => {\n  dispatch(loginRequest());\n\n  try {\n    const {\n      data\n    } = await Axios.post('http://localhost:5000/user/login', payload);\n    dispatch(loginSuccess(data));\n    dispatch(saveAuth(data));\n  } catch (error) {\n    dispatch(loginFailure(error.response.data.message));\n  }\n};\nexport const registerRequest = payload => ({\n  type: REGISTER_REQUEST,\n  payload\n});\nexport const registerSuccess = payload => ({\n  type: REGISTER_SUCCESS,\n  payload\n});\nexport const registerFailure = payload => ({\n  type: REGISTER_FAILURE,\n  payload\n});\nexport const register = (payload, history) => async dispatch => {\n  dispatch(registerRequest());\n\n  try {\n    const {\n      data\n    } = await Axios.post('http://localhost:5000/user/register', payload);\n    dispatch(registerSuccess(data));\n    history.push('/login');\n  } catch (error) {\n    dispatch(registerFailure(error.response.data.message));\n  }\n};","map":{"version":3,"sources":["/home/harsha/Documents/Employee manager/c/src/Redux/action.js"],"names":["Axios","LOGIN_SUCCESS","LOGIN_FAILURE","LOGIN_REQUEST","REGISTER_REQUEST","REGISTER_FAILURE","REGISTER_SUCCESS","LOGOUT","loginRequest","payload","type","loginSuccess","loginFailure","saveAuth","dispatch","localStorage","setItem","email","name","logoutActionCreator","logout","removeItem","login","data","post","error","response","message","registerRequest","registerSuccess","registerFailure","register","history","push"],"mappings":"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","sourcesContent":["import Axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAILURE, LOGIN_REQUEST, REGISTER_REQUEST, REGISTER_FAILURE, REGISTER_SUCCESS, LOGOUT } from './actionTypes';\n\nexport const loginRequest = payload => ({\n  type: LOGIN_REQUEST,\n  payload\n})\n\nexport const loginSuccess = payload => ({\n  type: LOGIN_SUCCESS,\n  payload\n})\n\nexport const loginFailure = payload => ({\n  type: LOGIN_FAILURE,\n  payload\n})\n\nexport const saveAuth = payload => dispatch => {\n  localStorage.setItem('email', payload.email)\n  localStorage.setItem('name', payload.name)\n}\n\nexport const logoutActionCreator = () => ({\n  type: LOGOUT\n})\n\nexport const logout = () => dispatch => {\n  localStorage.removeItem('token')\n  localStorage.removeItem('email')\n  localStorage.removeItem('name')\n  dispatch(logoutActionCreator())\n}\n\nexport const login = payload => async dispatch => {\n  dispatch(loginRequest())\n  try {\n    const { data } = await Axios.post('http://localhost:5000/user/login', payload)\n    dispatch(loginSuccess(data))\n    dispatch(saveAuth(data))\n  } catch (error) {\n    dispatch(loginFailure(error.response.data.message))\n  }\n}\n\nexport const registerRequest = payload => ({\n  type: REGISTER_REQUEST,\n  payload\n})\n\nexport const registerSuccess = payload => ({\n  type: REGISTER_SUCCESS,\n  payload\n})\n\nexport const registerFailure = payload => ({\n  type: REGISTER_FAILURE,\n  payload\n})\n\n\nexport const register = (payload, history) => async dispatch => {\n  dispatch(registerRequest())\n  try {\n    const { data } = await Axios.post('http://localhost:5000/user/register', payload)\n    dispatch(registerSuccess(data))\n    history.push('/login')\n  } catch (error) {\n    dispatch(registerFailure(error.response.data.message))\n  }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}